{"version":3,"sources":["Presentation/Slides/01.js","Presentation/Slides/02.js","Presentation/Slides/03.js","Presentation/Slides/04.js","Presentation/Slides/05.js","Presentation/Slides/06.js","Presentation/Slides/07.js","Presentation/Slides/08.js","Presentation/Slides/09.js","Presentation/Participant.js","Presentation/Slides/10.js","Presentation/Presentation.js","App.js","serviceWorker.js","index.js","images/git-logo.svg","images/github-logo.svg"],"names":["className","width","src","git_logo","alt","href","github_logo","props","name","map","Participant","fadeProperties","arrows","infinite","indicators","autoplay","slides","s1","s2","s3","s4","s5","s6","s7","s8","s9","s10","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"uPAGA,G,MAAA,yBAAKA,UAAU,aACb,uDACA,uDAA4B,uCAC5B,4BACE,0DACA,kDACA,mDAEF,2CACe,sCADf,mBAEE,6BAFF,kCAGiC,gDCXnC,2BAAKA,UAAU,aACb,+CACA,4BACE,kFACA,sDACA,gEACA,gD,gCCJJ,2BAAKA,UAAU,aACb,uCAAY,yBAAKC,MAAM,OAAOC,IAAKC,IAAUC,IAAI,aAAjD,KACA,2BACE,kCADF,+BACwC,uBAAGC,KAAK,wBAAR,wBACtC,6BACA,6BAHF,mBAIkB,kEAElB,oCACQ,mCADR,sDAEE,6BACA,6BAHF,OAIM,oCAJN,2CAMA,kBAAC,IAAD,CAAWL,UAAU,SAArB,+FAMA,uFCrBF,2BAAKA,UAAU,aACb,wCACA,gCACI,qCADJ,6DAEE,6BAFF,kFAKA,kBAAC,IAAD,CAAWA,UAAU,SAArB,iEAKA,kCACM,uCADN,wEAEE,6BACA,6BAHF,6CAI4C,qCAC1C,6BACA,6BANF,mCCbF,2BAAKA,UAAU,aACb,qCACA,6DACA,4EACA,uMAEA,2JCJF,2BAAKA,UAAU,aACb,0DACA,6CAEE,6BACA,6BAHF,kCAIiC,qCAJjC,2BAKE,6BACA,qCANF,KAMiB,qCANjB,SAMoC,wCANpC,2EAOE,6BACA,6BARF,OASM,mCATN,yCASuD,mCATvD,aAWA,kBAAC,IAAD,CAAWA,UAAU,SAArB,2F,gBCdF,2BAAKA,UAAU,aACb,sCAAW,yBAAKC,MAAM,OAAOC,IAAKI,IAAaF,IAAI,iBACnD,4BACE,wDACA,oDACA,qDACA,mEACA,sDACA,gDACA,gGCVJ,2BAAKJ,UAAU,aACb,mDACA,mCCFF,2BAAKA,UAAU,aACb,4DACA,uFAEE,6BAFF,wBAKA,8BACE,iEACA,6BACA,uBAAGK,KAAK,iCAAR,iCACA,6BACA,uBAAGA,KAAK,+BAAR,0BCbW,WAAUE,GACvB,OACE,2BAAIA,EAAMC,OCQd,2BAAKR,UAAU,aACb,6CACA,iFAEE,4BAZiB,CACnB,qCACA,mBACA,gBACA,gBASkBS,KAAI,SAAAD,GAAI,OAAI,4BAAI,kBAACE,EAAD,CAAaF,KAAMA,WCDjDG,EAAiB,CACrBC,QAAQ,EACRC,UAAU,EACVC,YAAY,EACZC,UAAU,GAGNC,EAAS,CAACC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAErC,WAAUnB,GACvB,OACE,yBAAKP,UAAU,mBACb,qDACA,kBAAC,OAAD,eAAMA,UAAU,aAAgBW,GAAiBK,KChBxCW,MATf,WACE,OACE,yBAAK3B,UAAU,0BAEb,kBAAC,EAAD,QCIc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,uCEzI5BC,EAAOC,QAAU,IAA0B,sC,kBCA3CD,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.51de7c4d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default \r\n<div className=\"each-fade\">\r\n  <h2>What's version control?</h2>\r\n  <p>Version control is about <b>history</b></p>\r\n  <ul>\r\n    <li>When did something change?</li>\r\n    <li>How did it change?</li>\r\n    <li>Why did it change?</li>\r\n  </ul>\r\n  <p>\r\n    This creates <b>context</b> for the project\r\n    <br></br>\r\n    In software, more often called <b>source control</b>\r\n  </p>\r\n</div>\r\n","import React from 'react';\r\n\r\nexport default\r\n<div className=\"each-fade\">\r\n  <h2>Why is it used?</h2>\r\n  <ul>\r\n    <li>Facilitates collaboration and working concurrently</li>\r\n    <li>Single source of truth</li>\r\n    <li>revert to older versions of code</li>\r\n    <li>Track progress</li>\r\n  </ul>\r\n</div>\r\n","import React from 'react';\r\nimport Highlight from 'react-highlight';\r\nimport git_logo from '../../images/git-logo.svg';\r\n\r\nexport default\r\n<div className=\"each-fade\">\r\n  <h2>What is <img width=\"64px\" src={git_logo} alt=\"Git Logo\" />?</h2>\r\n  <p>\r\n    <b>Git</b> is a source control tool - <a href=\"https://git-scm.com/\">https://git-scm.com/</a>\r\n    <br></br>\r\n    <br></br>\r\n    Specifically, a <b>distributed version control system</b>\r\n  </p>\r\n  <p>\r\n    A git <b>repo</b> (repository) is a group of files and their history\r\n    <br></br>\r\n    <br></br>\r\n    You <b>stage</b> a group of changes and create a commit\r\n  </p>\r\n  <Highlight className=\"shell\">\r\n    {`git init\r\necho \"Hello, world!\" > file.txt\r\ngit add file.txt\r\ngit commit -m \"Initial commit\"`}\r\n  </Highlight>\r\n  <p>Think of a repo as a database (some are used this way!)</p>\r\n</div>\r\n","import React from 'react';\r\nimport Highlight from 'react-highlight';\r\n\r\nexport default\r\n<div className=\"each-fade\">\r\n  <h2>Branches</h2>\r\n  <p>\r\n    A <b>branch</b> is really just a ‘pointer’ to a specific commit\r\n    <br></br>\r\n    Used to work on working on specific features, exploratory code, releases, etc.\r\n  </p>\r\n  <Highlight className=\"shell\">\r\n    {`git branch mybranch\r\ngit branch --list\r\ngit checkout mybranch`}\r\n  </Highlight>\r\n  <p>\r\n    git <b>checkout</b> will set your current branch, and will set your local files to match\r\n    <br></br>\r\n    <br></br>\r\n    Every git repo starts with a branch named <b>master</b>\r\n    <br></br>\r\n    <br></br>\r\n    Branches allow concurrent work\r\n  </p>\r\n</div>","import React from 'react';\r\n\r\nexport default\r\n<div className=\"each-fade\">\r\n  <h2>Repos</h2>\r\n  <p>The .git foulder -is- the repo</p>\r\n  <p>Can e-mail or copy it a USB to share the repo</p>\r\n  <p>Different from some other source control which use a server as the repo\r\n  This is why it is called distributed - any copy of the git repo is the ‘official’ repo</p>\r\n  <p>Allows offline work - we can commit, merge, etc changes and it is all stored in .git without needing to connect to a server</p>\r\n</div>","import React from 'react';\r\nimport Highlight from 'react-highlight';\r\n\r\n\r\nexport default\r\n<div className=\"each-fade\">\r\n  <h2>How do I work with others?</h2>\r\n  <p>\r\n    Use a git host!\r\n    <br></br>\r\n    <br></br>\r\n    Git has built-in support for a <b>remote</b>, which means a git host\r\n    <br></br>\r\n    <b>GitHub</b>, <b>GitLab</b>, and <b>Bitbucket</b> offer free hosting for git repos, and have tools for managing a project\r\n    <br></br>\r\n    <br></br>\r\n    You <b>push</b> your repo to the remote, others then <b>pull</b> the repo\r\n  </p>\r\n  <Highlight className=\"shell\">\r\n    {`git remote add origin https://github.com/Zulu-Inuoe/tmp.git\r\ngit push -u origin master`}\r\n  </Highlight>\r\n</div>\r\n","import React from 'react';\r\nimport github_logo from '../../images/github-logo.svg'\r\n\r\nexport default\r\n<div className=\"each-fade\">\r\n  <h2>GitHub <img width=\"48px\" src={github_logo} alt=\"GitHub Logo\" /></h2>\r\n  <ul>\r\n    <li>Create and assign issues</li>\r\n    <li>Submit pull requests</li>\r\n    <li>Create a project wiki</li>\r\n    <li>Perform custom actions on push/pull</li>\r\n    <li>Host static sites (!!)</li>\r\n    <li>readme rendering</li>\r\n    <li>Web editing interface for non-git users or last-minute changes</li>\r\n  </ul>\r\n</div>\r\n","import React from 'react';\r\n\r\nexport default\r\n<div className=\"each-fade\">\r\n  <h2>Interactive Portion</h2>\r\n  <p>...</p>\r\n</div>\r\n","import React from 'react';\r\n\r\nexport default\r\n<div className=\"each-fade\">\r\n  <h2>Questions/Comments/Concerns?</h2>\r\n  <p>\r\n    Git better with a follow-up presentation on GitHub Pages?\r\n    <br></br>\r\n    Call for presenters?\r\n  </p>\r\n  <span>\r\n    <b>Wilfredo Velázquez-Rodríguez</b>\r\n    <br></br>\r\n    <a href=\"https://github.com/Zulu-Inuoe\">https://github.com/Zulu-Inuoe</a>\r\n    <br></br>\r\n    <a href=\"mailto:zulu.inuoe@gmail.com\">zulu.inuoe@gmail.com</a>\r\n  </span>\r\n</div>\r\n","import React from 'react';\r\n\r\nexport default function (props) {\r\n  return (\r\n    <b>{props.name}</b>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport Participant from '../Participant'\r\n\r\nconst participants = [\r\n  'Wilfredo Velázquez-Rodríguez',\r\n  'Jennifer Pollack',\r\n  'Chelsea Irish',\r\n  'Maria Demesa'\r\n];\r\n\r\nexport default\r\n<div className=\"each-fade\">\r\n  <h2>Sign-in Sheet</h2>\r\n  <p>\r\n    Add your name to the list to show you've been here!\r\n    <ul>\r\n      {participants.map(name => <li><Participant name={name} /></li>)}\r\n    </ul>\r\n  </p>\r\n</div>\r\n","import React from 'react';\r\nimport { Fade } from 'react-slideshow-image';\r\n\r\nimport './Presentation.css';\r\n\r\nimport s1 from './Slides/01';\r\nimport s2 from './Slides/02';\r\nimport s3 from './Slides/03';\r\nimport s4 from './Slides/04';\r\nimport s5 from './Slides/05';\r\nimport s6 from './Slides/06';\r\nimport s7 from './Slides/07';\r\nimport s8 from './Slides/08';\r\nimport s9 from './Slides/09';\r\nimport s10 from './Slides/10';\r\n\r\nconst fadeProperties = {\r\n  arrows: true,\r\n  infinite: false,\r\n  indicators: true,\r\n  autoplay: false\r\n};\r\n\r\nconst slides = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];\r\n\r\nexport default function (props) {\r\n  return (\r\n    <div className=\"slide-container\">\r\n      <h1>Learn from the Git-go</h1>\r\n      <Fade className=\"box-style\" {...fadeProperties}>{slides}</Fade>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Presentation from './Presentation/Presentation'\n\nfunction App() {\n  return (\n    <div className=\"presentation-container\">\n      {/* <h1>Learn from the Git-go</h1> */}\n      <Presentation />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/git-logo.aaec9219.svg\";","module.exports = __webpack_public_path__ + \"static/media/github-logo.617870e4.svg\";"],"sourceRoot":""}